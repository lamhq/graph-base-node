openapi: "3.0.0"
info:
  title: FlexiWaste API
  description: "This is the api specification for FlexiWaste project."
  version: "1.0"
servers:
  - url: http://localhost:3000/api/v1
    description: Internal staging server for testing
  - url: http://api.example.com/v1
    description: Main (production) server
tags:
  - name: Account
    description: Operations about account
  - name: Post
    description: Post management operations
  - name: File
    description: File upload operations
paths:
  /account/sessions:
    post:
      tags:
      - Account
      summary: Logs user into the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                loginId:
                  type: string
                  example: "demo@example.com"
                password:
                  type: string
                  example: "123123"
      responses:
        200:
          description: login successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        400:
          $ref: '#/components/responses/400'

  /account/profile:
    get:
      tags:
      - Account
      security:
        - bearerAuth: []
      summary: Get your account information
      responses:
        200:
          description: account information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/401'
    put:
      tags:
      - Account
      security:
        - bearerAuth: []
      summary: Update your account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: updated account information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/401'

  /account/password-reset/requests:
    post:
      tags:
      - Account
      summary: Make a new password reset request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "demo@example.com"
      responses:
        200:
          description: Action completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password updated successfully."

  /account/password:
    put:
      tags:
      - Account
      summary: Update account password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: "reset password token"
                password:
                  type: string
                  description: "new password"
                  example: "123123"
                verify:
                  type: string
                  description: "password repeated"
                  example: "123123"
      responses:
        200:
          description: Action completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password updated successfully."

  /account/registrations:
    post:
      tags:
      - Account
      summary: Register a new account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: Saved user account data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /tokens:
    post:
      tags:
      - Account
      summary: Return new access token
      responses:
        200:
          description: New access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'

  /posts:
    get:
      tags:
        - Post
      summary: Get post list
      parameters:
        - name: limit
          in: query
          description: maximum number of records to return
          schema:
            type: string
        - name: page
          in: query
          description: current page
          schema:
            type: string
      responses:
        200:
          description: List of filtered posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

    post:
      tags:
        - Post
      summary: Add new post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        200:
          description: Added post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          $ref: '#/components/responses/404'

  /posts/{postId}:
    get:
      tags:
        - Post
      summary: Get post detail
      parameters:
        - in: path
          name: postId
          description: post's id
          required: true
          schema:
            type: string
      responses:
        200:
          description: updated post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'

    delete:
      tags:
        - Post
      summary: Get post detail
      parameters:
        - in: path
          name: postId
          description: post's id
          required: true
          schema:
            type: string
      responses:
        200:
          description: deleted post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'

  /cm/files/upload-params:
    get:
      tags:
        - File
      summary: Get upload parameters to upload file to Amazon S3
      description: https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-post-example.html
      responses:
        200:
          description: upload parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  keyPrefix:
                    type: string
                  acl:
                    type: string
                  success_action_status:
                    type: string
                  policy:
                    type: string
                  x-amz-signature:
                    type: string
                  x-amz-credential:
                    type: string
                  x-amz-date:
                    type: string
                  x-amz-algorithm:
                    type: string
  /cm/files:
    get:
      tags:
        - File
      summary: Get list of uploaded files
      responses:
        200:
          description: List of uploaded files
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/File'

components:
  responses:
    400:
      description: Invalid request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              errors:
                type: object
            example: Not found
    401:
      description: Access token is missing or invalid
    404:
      description: Not found
      content:
        text/plain:
          schema:
            type: string
            description: Not found
            example: Not found

  schemas:
    LoginResponse:
      title: login response
      type: object
      properties:
        token:
          type: object
          properties:
            value:
              type: string
            expiredAt:
              type: string
        userType:
          type: string
        id:
          type: string

    User:
      title: User
      type: object
      properties:
        _id:
          type: string
          description: user's id
        email:
          type: string
        username:
          type: string
        status:
          type: string
        profile:
          type: object
          properties:
            firstname:
              type: string
            lastname:
              type: string
            phone:
              type: string

    Post:
      title: Post
      type: object
      properties:
        _id:
          type: string
          description: post's id
        title:
          type: string
        content:
          type: string

    File:
      title: File
      type: object
      properties:
        _id:
          type: string
          description: post's id
        url:
          type: string
        filename:
          type: string
        type:
          type: string
        meta:
          type: object
          properties:
            s3-bucket:
              type: string
            s3-region:
              type: string
            s3-key:
              type: string

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
